"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[68991],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(t),c=a,g=d["".concat(i,".").concat(c)]||d[c]||m[c]||s;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=c;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<s;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const s={sidebar_position:7},l="Arguments and Returns",o={unversionedId:"evm/arguments",id:"evm/arguments",title:"Arguments and Returns",description:"Smart contract calls and events have arguments. In case the call or event signature is parsed against ABI,",source:"@site/docs/evm/arguments.md",sourceDirName:"evm",slug:"/evm/arguments",permalink:"/docs/evm/arguments",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/evm/arguments.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Smart Contract Calls",permalink:"/docs/evm/calls"},next:{title:"Smart Contract Events and Logs",permalink:"/docs/evm/events"}},i={},u=[{value:"Filters on arguments",id:"filters-on-arguments",level:2}],p={toc:u},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"arguments-and-returns"},"Arguments and Returns"),(0,a.kt)("p",null,"Smart contract calls and events have arguments. In case the call or event signature is parsed against ABI,\nthe arguments are showing the values, types and names passed to call or event."),(0,a.kt)("p",null,"In addition, returns shows the return values from the smart contract calls."),(0,a.kt)("p",null,"Arguments and returns are represented by the same data structure. It is array,\ncontaining entries for each argument value. In case when the data type of argument\nis array or emedded structure, the argument will have separate object for every\nvalue of array or structure."),(0,a.kt)("p",null,"It means that all argument values are flattened. To represent all possible cases, the following\nadditional information is provided:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Index - sequential index of argument value inside an array or strucutre"),(0,a.kt)("li",{parentName:"ul"},"Name - name of the argument or the name of the element of structure"),(0,a.kt)("li",{parentName:"ul"},"Type - the type of the argument"),(0,a.kt)("li",{parentName:"ul"},"Path - the array of top-level elements where the argument value is used. Each element of path have Name, Index, Type")),(0,a.kt)("p",null,"As example, the following data means the array of size 2 of addresses:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'          {\n            "Index": 0,\n            "Name": "",\n            "Path": [\n              {\n                "Index": 2,\n                "Name": "path",\n                "Type": "address[]"\n              }\n            ],\n            "Type": "address",\n            "Value": {\n              "__typename": "EVM_ABI_Address_Value_Arg",\n              "address": "0x6c812ab49f4b350b9d115e3f367302cd4fb58bbf"\n            }\n          },\n          {\n            "Index": 1,\n            "Name": "",\n            "Path": [\n              {\n                "Index": 2,\n                "Name": "path",\n                "Type": "address[]"\n              }\n            ],\n            "Type": "address",\n            "Value": {\n              "__typename": "EVM_ABI_Address_Value_Arg",\n              "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"\n            }\n          },\n')),(0,a.kt)("p",null,"meaning ",(0,a.kt)("inlineCode",{parentName:"p"},"['0x6c812ab49f4b350b9d115e3f367302cd4fb58bbf','0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2']")),(0,a.kt)("p",null,"To query attribute values, use union as shown:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"Arguments {\n        Index\n        Name\n        Type\n        Path {\n          Index\n          Name\n          Type\n        }\n        Value {\n          __typename\n          ... on EVM_ABI_Integer_Value_Arg {\n            integer\n          }\n          ... on EVM_ABI_String_Value_Arg {\n            string\n          }\n          ... on EVM_ABI_Address_Value_Arg {\n            address\n          }\n          ... on EVM_ABI_BigInt_Value_Arg {\n            bigInteger\n          }\n          ... on EVM_ABI_Bytes_Value_Arg {\n            hex\n          }\n          ... on EVM_ABI_Boolean_Value_Arg {\n            bool\n          }\n        }\n      }\n")),(0,a.kt)("p",null,"Data types are mapped to this values by the following rules:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"string, addresses, boolean are mapped directly to corresponding types (EVM_ABI_String_Value_Arg,EVM_ABI_Address_Value_Arg,EVM_ABI_Boolean_Value_Arg)"),(0,a.kt)("li",{parentName:"ol"},"bytes and byte array of any pre-defined size ( such as byte","[24]",") mapped to hex bytes (EVM_ABI_Bytes_Value_Arg)"),(0,a.kt)("li",{parentName:"ol"},"integers of size int8,16,32 and uint8,16 are mapped to integer (EVM_ABI_Integer_Value_Arg)"),(0,a.kt)("li",{parentName:"ol"},"all other integers mapped to big integer represented as string ( possible negative ) (EVM_ABI_BigInt_Value_Arg)")),(0,a.kt)("h2",{id:"filters-on-arguments"},"Filters on arguments"),(0,a.kt)("p",null,"Arguments and returns are arrays, and this enables to use filtering on them as described on\n",(0,a.kt)("a",{parentName:"p",href:"/docs/graphql/filters/#array-filter-types"},"filters"),"."),(0,a.kt)("p",null,"For example, this query selects specific calls by applying filter to argument length\nand to specific values of arguments.\nCombining argument filters with signature filters on events and calls gives you the power\nto analyse the arguments used in smart contracts in specific context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  EVM {\n    Calls(\n      where: {\n        Arguments: {\n          length: {eq: 2}\n          includes: [\n            {\n            Index: {eq: 0}\n            Name: {is: "recipient"}\n            Value: {Address: {is: "0xa7f6ebbd4cdb249a2b999b7543aeb1f80bda7969"}}\n           }\n           {\n            Name: {is: "amount"}\n            Value: {BigInteger: {ge: "1000000000"}}\n           }\n          ]\n        }\n      }\n      limit: {count: 10}) {\n      Arguments {\n        Index\n        Name\n        Type\n        Value {\n          ... on EVM_ABI_Integer_Value_Arg {\n            integer\n          }\n          ... on EVM_ABI_String_Value_Arg {\n            string\n          }\n          ... on EVM_ABI_Address_Value_Arg {\n            address\n          }\n          ... on EVM_ABI_BigInt_Value_Arg {\n            bigInteger\n          }\n          ... on EVM_ABI_Bytes_Value_Arg {\n            hex\n          }\n          ... on EVM_ABI_Boolean_Value_Arg {\n            bool\n          }\n        }\n      }\n      Call {\n        Signature {\n          Signature\n        }\n      }\n    }\n  }\n}\n\n')),(0,a.kt)("p",null,"The value of argument filter must be defined depending on the expected argument type.\nThere are the following options:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"BigInteger - for uint256/int256/int64/uint64 arguments"),(0,a.kt)("li",{parentName:"ul"},"Address - for addresses, 0x prefixed"),(0,a.kt)("li",{parentName:"ul"},"String - for strings"),(0,a.kt)("li",{parentName:"ul"},"Boolean - for boolean, just true/false"),(0,a.kt)("li",{parentName:"ul"},"UnsignedInteger - for uint8/16/32"),(0,a.kt)("li",{parentName:"ul"},"SignedInteger - int8/16/32"),(0,a.kt)("li",{parentName:"ul"},"Bytes - for bytes, 0x prefixed optional")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"filters affect the whole query to calls / events, so you anyway can query all arguments,\nnot just which pass the filter.")))}m.isMDXComponent=!0}}]);