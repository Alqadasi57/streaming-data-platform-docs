"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[94402],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,m=c["".concat(o,".").concat(d)]||c[d]||h[d]||i;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84989:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:0},l="Query Principles",s={unversionedId:"graphql/query",id:"graphql/query",title:"Query Principles",description:"You query the data using GraphQL language. Basically it",source:"@site/docs/graphql/query.md",sourceDirName:"graphql",slug:"/graphql/query",permalink:"/docs/graphql/query",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/graphql/query.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Building Queries",permalink:"/docs/category/building-queries"},next:{title:"Types of Queries",permalink:"/docs/category/types-of-queries"}},o={},u=[{value:"Schema",id:"schema",level:2},{value:"Query vs Subscription",id:"query-vs-subscription",level:2},{value:"Query Elements",id:"query-elements",level:2},{value:"Dataset Element",id:"dataset-element",level:3},{value:"Cube Element",id:"cube-element",level:3},{value:"Dimension Element",id:"dimension-element",level:3},{value:"Metric Element",id:"metric-element",level:3},{value:"Attributes",id:"attributes",level:3},{value:"Correctness",id:"correctness",level:3}],p={toc:u},c="wrapper";function h(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"query-principles"},"Query Principles"),(0,r.kt)("p",null,"You query the data using ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," language. Basically it\ndefines simple rules how the schema is defined, and how to query the data using this schema."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,"Schema defines what data you can query and which options (arguments) you can apply to the query.\nSchema allows ",(0,r.kt)("a",{parentName:"p",href:"/docs/ide/login"},"IDE")," to create hints to build the query interactively.\n",(0,r.kt)("a",{parentName:"p",href:"/docs/ide/login"},"IDE")," also shows the schema on query builder and in Document section.\nOnly queries matching schema can be successfully executed."),(0,r.kt)("p",null,"Schema for blockchain data is pretty complicated, but for your queries you do not need to\nsee it full. You only need a portion of it related to your needs typically."),(0,r.kt)("h2",{id:"query-vs-subscription"},"Query vs Subscription"),(0,r.kt)("p",null,"Query is used to query the data. When you need to get updated results, you must query the\nendpoint again with the same or another query. "),(0,r.kt)("p",null,"Subscription is used to get data updates. You define a ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/subscription/subsciption"},"subscription"),",\nand after the new data appear, it will be delivered to you without any actions from your side."),(0,r.kt)("p",null,"This defines the cases, when to use one or another:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use queries when you need data once, or the data not likely changed during its usage period"),(0,r.kt)("li",{parentName:"ul"},'use subscriptions for the "live" data, or when data may be changed while using it')),(0,r.kt)("p",null,"Good news, that queries and ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/subscription/subsciption"},"subscriptions")," use identical schemas, except some attributes of the top\nelement, to define the ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/dataset/options"},"dataset")," usage. It allows your applications to\nswitch between pull and push modes of operation with a minimal changes of the code\nand queries."),(0,r.kt)("p",null,"Compare the code in ",(0,r.kt)("a",{parentName:"p",href:"/docs/start/first-query"},"the first query")," and\n",(0,r.kt)("a",{parentName:"p",href:"/docs/start/getting-updates"},"the first subscription")," to see the difference."),(0,r.kt)("p",null,"This section describes principles that applies to subscriptions\nas well as to queries. We will show examples for queries, but remember that they applied to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/subscription/subsciption"},"subscriptions")," as well."),(0,r.kt)("h2",{id:"query-elements"},"Query Elements"),(0,r.kt)("p",null,"Consider the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  EVM(dataset: archive network: bsc) {\n    Blocks(limit: {count: 10}) {\n      Block {\n        Date\n      }\n      count\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"dataset-element"},"Dataset Element"),(0,r.kt)("p",null,"Top element of the query is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"  EVM(dataset: archive network: bsc) {\n")),(0,r.kt)("p",null,"which defines the type of schema used (",(0,r.kt)("inlineCode",{parentName:"p"},"EVM"),", Ethereum Virtual Machine). For different types of blockchains\nwe use different schema. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dataset: archive network: bsc")," is an attribute, defining how we query the ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/dataset/options"},"dataset"),".\nIn this case, we query just archive (delayed) data on BSC (Binance Smart Chain) network.\nRefer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/dataset/options"},"dataset")," documentation for possible options to apply on this level."),(0,r.kt)("p",null,"By selecting the top element ",(0,r.kt)("inlineCode",{parentName:"p"},"EVM")," we completely define what we can query below this element.\nApparently, Bitcoin and Ethereum have different schema and data, so we can not query them exactly the same way."),(0,r.kt)("h3",{id:"cube-element"},"Cube Element"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Blocks(limit: {count: 10})"),' is what we call "Cube", particulary because we\nuse ',(0,r.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/OLAP"},"OLAP")," methodology, applying\n",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/metrics"},"metrics"),". Cube defines what kind of facts we want to query, in this case\nwe interested in blocks. Cubes are generally different for different types of blockchains."),(0,r.kt)("h3",{id:"dimension-element"},"Dimension Element"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"Block {\n        Date\n      }\n")),(0,r.kt)("p",null,"is the dimension part of the query. It defines the granularity of the data that we query.\nThis example queries the data per-date manner. If we would need to have it per block,\nwe would use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"Block {\n        Number\n      }\n")),(0,r.kt)("p",null,"Query can make many dimensions. Result will have granularity combined from all dimensions used.\nQuery for transactions by block date and transaction hash will group all result by\nblock ",(0,r.kt)("strong",{parentName:"p"},"date")," ",(0,r.kt)("strong",{parentName:"p"},"AND")," by transaction ",(0,r.kt)("strong",{parentName:"p"},"hash"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"      Block {\n        Date\n      }\n      Transaction {\n        Hash\n      }\n")),(0,r.kt)("h3",{id:"metric-element"},"Metric Element"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"count")," is a ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/metrics"},"metric"),'. It is optional, defines "what we want to measure".\nIf it is missing, the results will give all data with the selected dimensions.'),(0,r.kt)("p",null,"Note that the presence of at least one ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/metrics"},"metric")," changes the way how query operates.\nCompare these two queries:"),(0,r.kt)("p",null,"The following query returns as many entries as blocks we have, with the date for each block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"Block {\n        Date\n      }\n")),(0,r.kt)("p",null,"This return counts of blocks ",(0,r.kt)("strong",{parentName:"p"},"per every date")," (aggregated by all blocks) :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"Block {\n        Date\n      }\n      count\n")),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/metrics/"},"metric")," tutorial for more details how you can use them."),(0,r.kt)("h3",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"limit: {count: 10}")," is an attribute, defining ",(0,r.kt)("a",{parentName:"p",href:"/docs/graphql/limits"},"limit")," on the data result size."),(0,r.kt)("p",null,"There are several types of attributes, described in the sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/limits"},"limits")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/sorting"},"ordering")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/filters"},"filters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/calculations"},"calculations"))),(0,r.kt)("h3",{id:"correctness"},"Correctness"),(0,r.kt)("p",null,"To be correctly executed, the query must conform with the following requirements:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"query must conform the schema. When you build query in the ",(0,r.kt)("a",{parentName:"li",href:"/docs/ide/login"},"IDE"),", it will highlight all errors according to schema"),(0,r.kt)("li",{parentName:"ol"},"query should not violate principles described above and some natural limitations of the database capabilities. For example, you can not fetch a million result in one query, you have to use offset and limits."),(0,r.kt)("li",{parentName:"ol"},"query should not consume more than available resources on the server. We use points to calculate consumed resources.")),(0,r.kt)("p",null,"If query can not execute, the result contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," in the results"),(0,r.kt)("p",null,"This screen shows the highlighted error in the query and the resulting response:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"IDE query error",src:n(35934).Z,width:"2726",height:"580"})))}h.isMDXComponent=!0},35934:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/query_error-6b27fb4b931319adebbb1e290ee7f528.png"}}]);