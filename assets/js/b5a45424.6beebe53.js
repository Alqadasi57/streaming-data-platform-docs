"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[66246],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},19021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:3},o="NFT Analytics Dashboard - Tutorial",s={unversionedId:"usecases/nft_Analytics",id:"usecases/nft_Analytics",title:"NFT Analytics Dashboard - Tutorial",description:"### Marketplace Analysis",source:"@site/docs/usecases/nft_Analytics.md",sourceDirName:"usecases",slug:"/usecases/nft_Analytics",permalink:"/docs/usecases/nft_Analytics",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/usecases/nft_Analytics.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"App",permalink:"/docs/usecases/nft-creator/app"},next:{title:"Crypto Dashboard Project",permalink:"/docs/usecases/crypto_dashboard"}},l={},c=[{value:"Marketplace Analysis",id:"marketplace-analysis",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Required Libraries",id:"required-libraries",level:2},{value:"Step by Step Code Implementation",id:"step-by-step-code-implementation",level:2},{value:"Importing the Required Libraries",id:"importing-the-required-libraries",level:3},{value:"Establishing Connection with the Bitquery API",id:"establishing-connection-with-the-bitquery-api",level:3},{value:"Displaying the Metric",id:"displaying-the-metric",level:3},{value:"Adding a Table",id:"adding-a-table",level:3},{value:"Adding a Chart",id:"adding-a-chart",level:3},{value:"Here&#39;s how it looks finally",id:"heres-how-it-looks-finally",level:4},{value:"Setting Up Subscriptions",id:"setting-up-subscriptions",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nft-analytics-dashboard---tutorial"},"NFT Analytics Dashboard - Tutorial"),(0,r.kt)("h3",{id:"marketplace-analysis"},"Marketplace Analysis"),(0,r.kt)("p",null," Bitquery's queries can help NFT marketplace builders analyze the performance of different NFTs on various blockchain networks. By providing real-time data on  transaction volume, and other key metrics, Bitquery can help builders optimize their marketplace's offerings and improve trading conditions for users."),(0,r.kt)("h2",{id:"tutorial"},"Tutorial"),(0,r.kt)("p",null,"This is a tutorial to build a NFT Dashboard using Python code that connects to the Bitquery API and retrieves data for a particular NFT on the Ethereum network. The code then displays the data on a user-friendly interface built using Python and Streamlit."),(0,r.kt)("h2",{id:"required-libraries"},"Required Libraries"),(0,r.kt)("p",null,"The code uses the following libraries:"),(0,r.kt)("p",null,"streamlit: A Python library for building web apps and visualizations\nhttp.client: A Python library for making HTTP requests\njson: A Python library for working with JSON data\npandas: A Python library for data manipulation and analysis"),(0,r.kt)("h2",{id:"step-by-step-code-implementation"},"Step by Step Code Implementation"),(0,r.kt)("h3",{id:"importing-the-required-libraries"},"Importing the Required Libraries"),(0,r.kt)("p",null,"The first step in the code is to import the required libraries using the import statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import streamlit as st\nimport http.client\nimport json\nimport pandas as pd\n")),(0,r.kt)("h3",{id:"establishing-connection-with-the-bitquery-api"},"Establishing Connection with the Bitquery API"),(0,r.kt)("p",null,"Next, the code connects to the Bitquery API using the http.client library and retrieves data on NFT transactions for a specific contract on the Ethereum network using a GraphQL query. The query is passed as a JSON payload to the request() method, along with the necessary headers and API key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nconn = http.client.HTTPSConnection("streaming.bitquery.io")\npayload = json.dumps({\n   "query": "{\\n  EVM(dataset: combined) {\\n    DEXTrades(\\n      where: {Trade: {Dex: {ProtocolFamily: {is: \\"OpenSea\\"}}, Buy: {Currency: {SmartContract: {is: \\"0x322e2741c792c1f2666d159bcc6d3a816f98d954\\"}}}}}\\n    ) {\\n      Count_NFTS_bought: sum(of: Trade_Buy_Amount)\\n    }\\n  }\\n}\\n",\n   "variables": "{}"\n})\nheaders = {\n   \'Content-Type\': \'application/json\',\n   \'X-API-KEY\': \'YOUR API KEY\'\n}\nconn.request("POST", "/graphql", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nresp= json.loads( data.decode("utf-8"))\n\ncount_nfts_bought = resp[\'data\'][\'EVM\'][\'DEXTrades\'][0][\'Count_NFTS_bought\']\n')),(0,r.kt)("p",null,"The code retrieves the count of NFTs bought from the response data and stores it in the count_nfts_bought variable."),(0,r.kt)("h3",{id:"displaying-the-metric"},"Displaying the Metric"),(0,r.kt)("p",null,"The code then displays the retrieved data in a Streamlit dashboard using the streamlit library. The dashboard includes a title, a header, a metric, a table, and a line chart."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'st.title ("NFT Dashboard")\nst.header("Punk Evil Rabbit NFT")\nst.metric("Count of Punk Evil Rabbit NFTS Bought",count_nfts_bought)\n')),(0,r.kt)("p",null,"The title() and header() methods are used to display the title and header of the dashboard, respectively. The metric() method is used to display the count of NFTs bought as a metric."),(0,r.kt)("h3",{id:"adding-a-table"},"Adding a Table"),(0,r.kt)("p",null,"This code snippet retrieves the latest DEX trades for a specific NFT token from the Ethereum blockchain using The Graph API, and displays them in a data table using the streamlit library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'payload_table = json.dumps({\n    "query": "{\\n  EVM(dataset: combined, network: eth) {\\n    buyside: DEXTrades(\\n      limit: {count: 10}\\n      orderBy: {descending: Block_Time}\\n      where: {Trade: {Buy: {Currency: {SmartContract: {is: \\"0x322e2741c792c1f2666d159bcc6d3a816f98d954\\"}}}}}\\n    ) {\\n      Block {\\n        Number\\n        Time\\n      }\\n      Transaction {\\n        From\\n        To\\n        Hash\\n      }\\n      Trade {\\n        Buy {\\n          Amount\\n          Buyer\\n          Currency {\\n            Name\\n            Symbol\\n            SmartContract\\n          }\\n          Seller\\n          Price\\n        }\\n        Sell {\\n          Amount\\n          Buyer\\n          Currency {\\n            Name\\n            SmartContract\\n            Symbol\\n          }\\n          Seller\\n          Price\\n        }\\n      }\\n    }\\n    sellside: DEXTrades(\\n      limit: {count: 10}\\n      orderBy: {descending: Block_Time}\\n      where: {Trade: {Buy: {Currency: {SmartContract: {is: \\"0x322e2741c792c1f2666d159bcc6d3a816f98d954\\"}}}}}\\n    ) {\\n      Block {\\n        Number\\n        Time\\n      }\\n      Transaction {\\n        From\\n        To\\n        Hash\\n      }\\n      Trade {\\n        Buy {\\n          Amount\\n          Buyer\\n          Currency {\\n            Name\\n            Symbol\\n            SmartContract\\n          }\\n          Seller\\n          Price\\n        }\\n        Sell {\\n          Amount\\n          Buyer\\n          Currency {\\n            Name\\n            SmartContract\\n            Symbol\\n          }\\n          Seller\\n          Price\\n        }\\n      }\\n    }\\n  }\\n}\\n",\n   "variables": "{}"\n})\n\nconn.request("POST", "/graphql", payload_table, headers)\nres1 = conn.getresponse()\ndata1 = res1.read()\nresp1= json.loads( data1.decode("utf-8"))\n\nst.subheader("Latest DEX Trades")\n\ndata_table= resp1[\'data\'][\'EVM\'][\'buyside\']\ndf = pd.json_normalize(data_table)\nst.dataframe(df)\n')),(0,r.kt)("h3",{id:"adding-a-chart"},"Adding a Chart"),(0,r.kt)("p",null,"The chart section of the code creates a line chart using the streamlit library. The chart displays the number of NFTs bought on a daily basis on the OpenSea protocol on the Ethereum blockchain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"## chart\npayload3 = json.dumps({\n   \"query\": \"{\\n  EVM(dataset: combined) {\\n    DEXTrades(\\n      where: {Trade: {Dex: {ProtocolFamily: {is: \\\"OpenSea\\\"}}, Buy: {Currency: {SmartContract: {is: \\\"0x322e2741c792c1f2666d159bcc6d3a816f98d954\\\"}}}}}\\n    ) {\\n      Count_NFTS_bought: sum(of: Trade_Buy_Amount)\\n      Block {\\n        Date\\n      }\\n    }\\n  }\\n}\\n\",\n   \"variables\": \"{}\"\n})\n\nconn.request(\"POST\", \"/graphql\", payload3, headers)\nres3 = conn.getresponse()\ndata3 = res3.read()\n\nchart_data=json.loads(data3)['data']['EVM']['DEXTrades']\n\ndf_chart = pd.json_normalize(chart_data)\ndf_chart.columns = ['Count_NFTS_bought', 'Block_Date']\n# Convert the 'Count_NFTS_bought' column to integer data type\ndf_chart['Count_NFTS_bought'] = df_chart['Count_NFTS_bought'].astype(int)\ndf_chart['Block_Date'] = pd.to_datetime(df_chart['Block_Date'])\n\nst.subheader('Daily Metrics')\nst.line_chart(df_chart,x='Block_Date',y='Count_NFTS_bought')\n")),(0,r.kt)("h4",{id:"heres-how-it-looks-finally"},"Here's how it looks ",(0,r.kt)("img",{alt:"finally",src:n(46366).Z,width:"1912",height:"900"})),(0,r.kt)("p",null,"If you want to build up query from scratch you are welcome or you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/explore/All%20queries"},"premade examples")," as well."),(0,r.kt)("h2",{id:"setting-up-subscriptions"},"Setting Up Subscriptions"),(0,r.kt)("p",null,"Lastly, we also have the the ",(0,r.kt)("a",{parentName:"p",href:"https://community.bitquery.io/t/how-to-subscribe-to-real-time-data-stream-using-bitquery-api-and-python-graphql-client/1431?u=divya"},"\u201csubscribe\u201d")," feature of the dApp. These functions are important as they allow us to continuously update the dApp for our users in real-time whenever a transaction of digital collectibles occurs in the marketplace."))}p.isMDXComponent=!0},46366:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/nft_dashboard-3ac34f5cc458bfe6a9b6effbb1819a7c.gif"}}]);