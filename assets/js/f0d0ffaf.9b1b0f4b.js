"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[59571],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?i.createElement(f,l(l({ref:t},d),{},{components:n})):i.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},60186:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:3},l="Filtering",o={unversionedId:"graphql/filters",id:"graphql/filters",title:"Filtering",description:"In most cases you do not need the full dataset, but just a portion, related to the",source:"@site/docs/graphql/filters.md",sourceDirName:"graphql",slug:"/graphql/filters",permalink:"/docs/graphql/filters",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/graphql/filters.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Blockchain Reorg Tree",permalink:"/docs/graphql/dataset/select_blocks"},next:{title:"Sorting",permalink:"/docs/graphql/sorting"}},s={},p=[{value:"Examples",id:"examples",level:2},{value:"Filter Types",id:"filter-types",level:2},{value:"Numeric Filter Types",id:"numeric-filter-types",level:3},{value:"String Filter Types",id:"string-filter-types",level:3},{value:"Date and Time Filter Types",id:"date-and-time-filter-types",level:3},{value:"Array Filter Types",id:"array-filter-types",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filtering"},"Filtering"),(0,a.kt)("p",null,"In most cases you do not need the full dataset, but just a portion, related to the\nentity or range you are interested in."),(0,a.kt)("p",null,"Filtering can be applied to queries and subscriptions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in query, filter defines what part of the dataset you need in results"),(0,a.kt)("li",{parentName:"ul"},"with subscription, filter also determine when the updated data will be sent to you. If the new data does not match filter, update will not be triggered")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use filters in subscription for notification services on specific type of events matching filter criteria")),(0,a.kt)("p",null,"Filters are defined on the cube element level (Blocks, Transactions, so on) as a ",(0,a.kt)("inlineCode",{parentName:"p"},"where")," attribute."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM {\n    Blocks(where: {\n        Block: {\n          GasUsed: {\n            ge: "14628560"\n          }\n        }\n    }) {\n      Block {\n        Number\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"returns block numbers with gas used exceeding certain level. ",(0,a.kt)("inlineCode",{parentName:"p"},"where")," attribute is structured,\nwith the same levels as the query schema. This allows to build complex filters by combining criteria,\nas in the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM {\n    Transactions(where: {\n        Block: {\n          GasUsed: {\n            ge: "26000000"\n          }\n        }\n      Transaction: {\n        Gas: {\n          ge: "16000000"\n        }\n      }\n    }) {\n      Block {\n        GasUsed\n      }\n      Transaction {\n        Gas\n\n      }\n    }\n  }\n}\n\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"filters are combined by ",(0,a.kt)("strong",{parentName:"p"},"AND")," principles, result set is an intersection of all criteria defined in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"where")," attribute")),(0,a.kt)("h2",{id:"filter-types"},"Filter Types"),(0,a.kt)("p",null,"Depending on the data type of the element used in ",(0,a.kt)("inlineCode",{parentName:"p"},"where")," filter, different operators can be applied."),(0,a.kt)("h3",{id:"numeric-filter-types"},"Numeric Filter Types"),(0,a.kt)("p",null,"For numeric data, the following operators applicable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"eq")," equals to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ne")," not equals to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ge")," greater or equal"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gt")," greater than"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"le")," less or equal"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lt")," less than")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you need to define the range of value, use ",(0,a.kt)("inlineCode",{parentName:"p"},"ge")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"le")," together:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'          GasUsed: {\n            ge: "26000000"\n            le: "60000000"\n          }\n'))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Almost all numeric values in blockchain lies above the 32-bit boundary defined for numbers in GraphQL\nand JSON. So the string values used instead to define any number with not limited precision.")),(0,a.kt)("h3",{id:"string-filter-types"},"String Filter Types"),(0,a.kt)("p",null,"For string data, the following operators applicable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is")," equals to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"not")," not equals to")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"not")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ne")," filters do not prevent to query large amount of data, consider use them only with\nsome other filters")),(0,a.kt)("h3",{id:"date-and-time-filter-types"},"Date and Time Filter Types"),(0,a.kt)("p",null,"For date and timestamp data, the following operators applicable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is")," date equals to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"not")," date not equals to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"after")," after certain date (not including it)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"since")," after including date"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"till")," before including date"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"before")," before not including date")),(0,a.kt)("h3",{id:"array-filter-types"},"Array Filter Types"),(0,a.kt)("p",null,"Array fields can be filtered using the following conditions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"length")," condition on array length;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"includes")," if array include  item defined by the condition; "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"excludes")," if array exclude  item defined by the condition;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startsWith")," if array starts with the item defined by the condition;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endsWith")," if array ends with the item defined by the condition;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"notStartsWith")," if array does not start with the item defined by the condition;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"notEndsWith")," if array does not end with the item defined by the condition;")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Note that all conditions on items can be a list, they all applied to selecting the item in AND manner.")),(0,a.kt)("p",null,"Example of the condition is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  EVM {\n    Calls(\n      where: {\n        Arguments: {\n                    length: {eq: 2}\n          includes: {\n            Index: {eq: 0}\n            Name: {is: "recipient"}\n          }\n        }\n      }\n      limit: {count: 10}) {\n      Arguments {\n        Index\n        Name\n        Type\n      }\n      Call {\n        Signature {\n          Signature\n        }\n      }\n    }\n  }\n}\n\n')),(0,a.kt)("p",null,'Filter selects calls which have 2 arguments, and the first argument name is "recipient"'),(0,a.kt)("p",null,"Condition can combine conditions on the items:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Arguments: {\n          includes: [\n            {\n            Index: {eq: 0}\n            Name: {is: "recipient"}\n            Value: {Address: {is: "0xa7f6ebbd4cdb249a2b999b7543aeb1f80bda7969"}}\n           }\n           {\n            Name: {is: "amount"}\n            Value: {BigInteger: {ge: "1000000000"}}\n           }\n          ]\n        }\n      }\n')),(0,a.kt)("p",null,"It extends the previous example, selecting only calls that have all 4 conditions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the first argument named 'recipient' "),(0,a.kt)("li",{parentName:"ul"},"the first argument  value of type address equal to '0xa7f6ebbd4cdb249a2b999b7543aeb1f80bda7969'"),(0,a.kt)("li",{parentName:"ul"},'any argument called "amount"'),(0,a.kt)("li",{parentName:"ul"},'argument named "amount" having value bigger than 1000000000')))}m.isMDXComponent=!0}}]);