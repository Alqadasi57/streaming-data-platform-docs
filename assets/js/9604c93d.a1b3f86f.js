"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[70280],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(t),p=a,y=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},29080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:10},i="DEX Trades",s={unversionedId:"evm/dextrades",id:"evm/dextrades",title:"DEX Trades",description:"DEXTrades api gives trading-related data from different DEXs such as Uniswap, Pancakeswap, 0x, etc.",source:"@site/docs/evm/dextrades.md",sourceDirName:"evm",slug:"/evm/dextrades",permalink:"/docs/evm/dextrades",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/evm/dextrades.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Balance Updates",permalink:"/docs/evm/balances"},next:{title:"Examples",permalink:"/docs/category/examples"}},l={},d=[{value:"DEX Trades Cube",id:"dex-trades-cube",level:2},{value:"DEX Trades By Tokens",id:"dex-trades-by-tokens",level:2},{value:"Examples",id:"examples",level:2}],c={toc:d},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dex-trades"},"DEX Trades"),(0,a.kt)("p",null,"DEXTrades api gives trading-related data from different DEXs such as Uniswap, Pancakeswap, 0x, etc."),(0,a.kt)("p",null,"API provides historical and real-time trades and pricing information for tokens. The API allows different filters to query the Smart contract calls details from different dimensions, such as from different DEXs, protocols, tokens, trades, pools, etc.\nYou can find more examples ",(0,a.kt)("a",{parentName:"p",href:"/docs/examples/dextrades/get-trading-pairs-of-token"},"here")),(0,a.kt)("h2",{id:"dex-trades-cube"},"DEX Trades Cube"),(0,a.kt)("p",null,'Dex Trades represent every swap of tokens on decentralised exchange. Every trade has\ntwo sides, represented by currencies ( tokens or native currency ), which are exchanged.\nBuyer and seller side in some cases are selected related to the "maker" side of the trade if\nthe DEX is limit orders type. In case of automated trading ( uniswap, balancer and others)\nthe trade is related to the pool smart contract, executing the trade.'),(0,a.kt)("p",null,"Use DEX Trades Cube in case when you need to build query based on protocol or smart contracts, for example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"total count of trades by protocols or smart contracts or oter dimensions"),(0,a.kt)("li",{parentName:"ul"},"gas spending on trades"),(0,a.kt)("li",{parentName:"ul"},"dynamics in time of DEX usage")),(0,a.kt)("h2",{id:"dex-trades-by-tokens"},"DEX Trades By Tokens"),(0,a.kt)("p",null,"DEX Trades By Tokens exposes trades relative to the token. So every trade is represented by 2 records - by every token\nparticipating in trade. This allows to build queries by tokens which take into account all orders for token\n(buy side and sell side)."),(0,a.kt)("p",null,"Use DEX Trades Cube in case when you need to build query based on token or pair of tokens, for example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"query every pair the token is involved"),(0,a.kt)("li",{parentName:"ul"},"price of trading the token"),(0,a.kt)("li",{parentName:"ul"},"open-high-low-close OHLC graph building ( see example below )")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"DEX Trades By Tokens has twice as much records for dex trades. Always use at least one filter by token\nto query correctly! ")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use interval argument for date/time to build OHLC graph by time interval")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Here are the sample queries to get started:"),(0,a.kt)("p",null,"Query price OHLC data for token pairs using DEX Trades By Tokens"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  EVM(dataset: realtime) {\n    DEXTradeByTokens(\n      orderBy: {ascendingByField: "Block_Time"}\n      where: {\n        Trade: {\n          Side: {\n            Currency: {\n              SmartContract: {is: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"}\n            }\n          }\n          Currency: {SmartContract: {\n          is: "0xdac17f958d2ee523a2206206994597c13d831ec7"\n        }}}\n      }\n    ) {\n      \n      Block {\n        Time(interval: {in: minutes count: 10})\n      }\n      \n      volume: sum(of: Trade_Amount)\n      \n      Trade {\n        high: Price(maximum: Trade_Price)\n        low: Price(minimum: Trade_Price)\n        open: Price(minimum: Block_Number)\n        close: Price(maximum: Block_Number)\n      }\n      \n      count\n    }\n  }\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"we applied filter by tokens, used ",(0,a.kt)("a",{parentName:"p",href:"/docs/graphql/datetime"},"interval")," and actual numbers\ncalculated by  aggregated ",(0,a.kt)("a",{parentName:"p",href:"/docs/graphql/calculations"},"metrics ( max/min )"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM(dataset: combined, network: eth) {\n    buyside: DEXTrades(\n      limit: {count: 10}\n      orderBy: {descending: Block_Time}\n      where: {Trade: {Buy: {Currency: {SmartContract: {is: "0x5283d291dbcf85356a21ba090e6db59121208b44"}}}}, Block: {Time: {since: "2023-03-03T01:00:00Z", till: "2023-03-05T05:15:23Z"}}}\n    ) {\n      Block {\n        Number\n        Time\n      }\n      Transaction {\n        From\n        To\n        Hash\n      }\n      Trade {\n        Buy {\n          Amount\n          Buyer\n          Currency {\n            Name\n            Symbol\n            SmartContract\n          }\n          Seller\n          Price\n        }\n        Sell {\n          Amount\n          Buyer\n          Currency {\n            Name\n            SmartContract\n            Symbol\n          }\n          Seller\n          Price\n        }\n      }\n    }\n    sellside: DEXTrades(\n      limit: {count: 10}\n      orderBy: {descending: Block_Time}\n      where: {Trade: {Buy: {Currency: {SmartContract: {is: "0x5283d291dbcf85356a21ba090e6db59121208b44"}}}}, Block: {Time: {since: "2023-03-03T01:00:00Z", till: "2023-03-05T05:15:23Z"}}}\n    ) {\n      Block {\n        Number\n        Time\n      }\n      Transaction {\n        From\n        To\n        Hash\n      }\n      Trade {\n        Buy {\n          Amount\n          Buyer\n          Currency {\n            Name\n            Symbol\n            SmartContract\n          }\n          Seller\n          Price\n        }\n        Sell {\n          Amount\n          Buyer\n          Currency {\n            Name\n            SmartContract\n            Symbol\n          }\n          Seller\n          Price\n        }\n      }\n    }\n  }\n}\n\n')))}u.isMDXComponent=!0}}]);