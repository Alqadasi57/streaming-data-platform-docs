"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1403],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},40812:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const i={sidebar_position:2},a="Real-Time Subscription",s={unversionedId:"start/getting-updates",id:"start/getting-updates",title:"Real-Time Subscription",description:"After you created and successfully run your first query, it is time to",source:"@site/docs/start/getting-updates.md",sourceDirName:"start",slug:"/start/getting-updates",permalink:"/docs/start/getting-updates",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/start/getting-updates.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Your First Query",permalink:"/docs/start/first-query"},next:{title:"Use it in Your Application",permalink:"/docs/start/embed"}},u={},l=[],c={toc:l},p="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(p,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"real-time-subscription"},"Real-Time Subscription"),(0,o.kt)("p",null,"After you created and successfully run ",(0,o.kt)("a",{parentName:"p",href:"/docs/start/first-query"},"your first query"),", it is time to\nget updates on the new data coming."),(0,o.kt)("p",null,'It is just as easy as replace "query" with "subscription" on the first line in editor,\nhere we will edit a little the query to use the BSC network, so it will read now as:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"subscription RealTimeBlocks {\n  EVM(network: bsc) {\n    Blocks {\n      Block {\n        Number\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"The run button now again becomes green. But now when you press it, you will not\nimmediately get results, as it will wait for the new block to come. In BSC network\nblocks typically come in 3-4 seconds, so you will see this sequence after some time\non the result panel:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IDE subscription execution",src:r(50756).Z,width:"1912",height:"894"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Query used: ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.bitquery.io/ide/Real-Time-Blocks-Subscription--BSC"},"Real Time Blocks Subscription | BSC"))),(0,o.kt)("p",null,"To stop updates, press the run button again."),(0,o.kt)("admonition",{title:"Resources usage",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Please note that as long as data is being received, the box on the right will continue to populate, which has no text limit, so make sure you don't waste your resources!")))}d.isMDXComponent=!0},50756:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/ide_subscription-5483ecd2d8448486a933af717a58ef1b.gif"}}]);