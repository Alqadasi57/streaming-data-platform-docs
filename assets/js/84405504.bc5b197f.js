"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[698],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),s=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(a),p=n,f=u["".concat(i,".").concat(p)]||u[p]||m[p]||o;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:n,l[1]=c;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},23910:(e,t,a)=>{a.r(t),a.d(t,{Badge:()=>m,Bullet:()=>d,Details:()=>f,SpecifiedBy:()=>u,assets:()=>s,contentTitle:()=>c,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=a(87462),n=a(67294),o=a(3905);const l={id:"dataset-arg-enum",title:"dataset_arg_enum",hide_table_of_contents:!1},c=void 0,i={unversionedId:"graphql-reference/enums/dataset-arg-enum",id:"graphql-reference/enums/dataset-arg-enum",title:"dataset_arg_enum",description:"Type of algorithm to filter block updates",source:"@site/docs/graphql-reference/enums/dataset-arg-enum.mdx",sourceDirName:"graphql-reference/enums",slug:"/graphql-reference/enums/dataset-arg-enum",permalink:"/docs/graphql-reference/enums/dataset-arg-enum",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/graphql-reference/enums/dataset-arg-enum.mdx",tags:[],version:"current",frontMatter:{id:"dataset-arg-enum",title:"dataset_arg_enum",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"blocks_update_arg_enum",permalink:"/docs/graphql-reference/enums/blocks-update-arg-enum"},next:{title:"EVM_BalanceUpdate_CompareFields",permalink:"/docs/graphql-reference/enums/evm-balance-update-compare-fields"}},s={},d=()=>(0,o.kt)(n.Fragment,null,(0,o.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=e=>(0,o.kt)(n.Fragment,null,"Specification",(0,o.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),m=e=>(0,o.kt)(n.Fragment,null,(0,o.kt)("span",{className:"badge badge--"+e.class},e.text)),p=[{value:"Values",id:"values",level:3},{value:"<code style={{ fontWeight: 'normal' }}>dataset_arg_enum.<b>combined</b></code>",id:"code-style-fontweight-normal-dataset_arg_enumbcombinedbcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>dataset_arg_enum.<b>realtime</b></code>",id:"code-style-fontweight-normal-dataset_arg_enumbrealtimebcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>dataset_arg_enum.<b>archive</b></code>",id:"code-style-fontweight-normal-dataset_arg_enumbarchivebcode",level:4},{value:"Member of",id:"member-of",level:3}],f=e=>{let{dataOpen:t,dataClose:a,children:l,startOpen:c=!1}=e;const[i,s]=(0,n.useState)(c);return(0,o.kt)("details",(0,r.Z)({},i?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,o.kt)("summary",{onClick:e=>{e.preventDefault(),s((e=>!e))},style:{listStyle:"none"}},i?t:a),i&&l)},g={Bullet:d,SpecifiedBy:u,Badge:m,toc:p,Details:f},b="wrapper";function y(e){let{components:t,...a}=e;return(0,o.kt)(b,(0,r.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Type of algorithm to filter block updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"enum dataset_arg_enum {\n  combined\n  realtime\n  archive\n}\n")),(0,o.kt)("h3",{id:"values"},"Values"),(0,o.kt)("h4",{id:"code-style-fontweight-normal-dataset_arg_enumbcombinedbcode"},(0,o.kt)("a",{parentName:"h4",href:"#"},(0,o.kt)("code",{style:{fontWeight:"normal"}},"dataset_arg_enum.",(0,o.kt)("b",null,"combined")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Combined dataset ( realtime and archive )")),(0,o.kt)("h4",{id:"code-style-fontweight-normal-dataset_arg_enumbrealtimebcode"},(0,o.kt)("a",{parentName:"h4",href:"#"},(0,o.kt)("code",{style:{fontWeight:"normal"}},"dataset_arg_enum.",(0,o.kt)("b",null,"realtime")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Realtime dataset containing last set of blocks")),(0,o.kt)("h4",{id:"code-style-fontweight-normal-dataset_arg_enumbarchivebcode"},(0,o.kt)("a",{parentName:"h4",href:"#"},(0,o.kt)("code",{style:{fontWeight:"normal"}},"dataset_arg_enum.",(0,o.kt)("b",null,"archive")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Archive dataset with blocks delayed ( only trunk blocks included )")),(0,o.kt)("h3",{id:"member-of"},"Member of"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/graphql-reference/queries/evm"},(0,o.kt)("inlineCode",{parentName:"a"},"EVM")),"  ",(0,o.kt)(m,{class:"secondary",text:"query",mdxType:"Badge"})))}y.isMDXComponent=!0}}]);