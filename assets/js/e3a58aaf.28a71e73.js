"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23598],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,y=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(y,s(s({ref:n},c),{},{components:t})):a.createElement(y,s({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},91514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:5},s="NFT Trades API",l={unversionedId:"examples/nft/nft-trades-apI",id:"examples/nft/nft-trades-apI",title:"NFT Trades API",description:"The NFT Trades API provides access to diverse NFT DEX trades data on supported blockchain.",source:"@site/docs/examples/nft/nft-trades-apI.md",sourceDirName:"examples/nft",slug:"/examples/nft/nft-trades-apI",permalink:"/docs/examples/nft/nft-trades-apI",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/examples/nft/nft-trades-apI.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"NFT Calls API",permalink:"/docs/examples/nft/nft-calls-apI"},next:{title:"NFT Metadata API",permalink:"/docs/examples/nft/nft-metadata-api"}},i={},d=[{value:"Get Latest NFT Trades of an Address",id:"get-latest-nft-trades-of-an-address",level:2},{value:"Get Top Traded NFT Tokens",id:"get-top-traded-nft-tokens",level:2},{value:"Latest NFT Trades on Opensea",id:"latest-nft-trades-on-opensea",level:2},{value:"Top Traded NFTs on Opensea",id:"top-traded-nfts-on-opensea",level:2},{value:"Total Buy &amp; Sell of an NFT on Opensea",id:"total-buy--sell-of-an-nft-on-opensea",level:2},{value:"Latest NFT buyer on Opensea",id:"latest-nft-buyer-on-opensea",level:2},{value:"Specific Buyer stats of an NFT on Opensea",id:"specific-buyer-stats-of-an-nft-on-opensea",level:2},{value:"Latest NFT Trades on Ethereum for Seaport protocol",id:"latest-nft-trades-on-ethereum-for-seaport-protocol",level:2}],c={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nft-trades-api"},"NFT Trades API"),(0,r.kt)("p",null,"The NFT Trades API provides access to diverse NFT DEX trades data on supported blockchain.  "),(0,r.kt)("h2",{id:"get-latest-nft-trades-of-an-address"},"Get Latest NFT Trades of an Address"),(0,r.kt)("p",null,"Let's dive into an example query that fetches the most recent NFT trades associated with a specific address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},' query MyQuery {\n  EVM(dataset: combined) {\n    DEXTrades(\n      limit: {offset: 0, count: 10}\n      orderBy: {descendingByField: "Block_Time"}\n      where: {Trade: {Buy: {Buyer: {is: "0x6afdf83501af209d2455e49ed9179c209852a701"}, Currency: {Fungible: false}}}}\n    ) {\n      Trade {\n        Dex {\n          ProtocolName\n          OwnerAddress\n          Delegated\n          DelegatedTo\n          ProtocolName\n          SmartContract\n        }\n        Buy {\n          Price\n          Seller\n          Buyer\n          Currency {\n            Symbol\n            HasURI\n            Name\n            Fungible\n            SmartContract\n          }\n          Ids\n          OrderId\n          URIs\n        }\n        Sell {\n          Price\n          Amount\n          Currency {\n            Name\n          }\n          Buyer\n          Seller\n        }\n      }\n      Transaction {\n        Hash\n      }\n      Block {\n        Time\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset")," : Indicates the ",(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/dataset/combined"},"combined")," dataset to be used. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy")," : Orders the results in descending order based on the Block_Time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"where")," : It filters results based on specified conditions. Here, it selects transfers where the currency is non-fungible and buyer's address is ",(0,r.kt)("inlineCode",{parentName:"li"},"0x6afdf83501af209d2455e49ed9179c209852a701"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Data")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Trade"),": It displays the details of the trade, ",(0,r.kt)("inlineCode",{parentName:"li"},"DEX {}")," provides DEX information (protocol name, owner address, delegated status, delegated to address, and smart contract address), ",(0,r.kt)("inlineCode",{parentName:"li"},"Buy{}")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sell{}")," represents the buy side details ( price, seller, buyer, currency information, NFT IDs, order ID, and URIs ), and the sell side details ( price, amount, currency information, buyer, and seller ) respectively."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")," : Represents the hash of the transaction associated with the trade."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block")," - Represents the block time of the trade.")),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/NFT-trades-of-an-address"},"here"),"."),(0,r.kt)("h2",{id:"get-top-traded-nft-tokens"},"Get Top Traded NFT Tokens"),(0,r.kt)("p",null,"This query retrieves the Top Traded NFT Tokens of the month."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      orderBy: {descendingByField: "count"}\n      limit: {offset: 0, count: 10}\n      where: {Block: {Date: {since: "2023-05-01", till: "2023-05-28"}}, Trade: {Buy: {Currency: {Fungible: false}}, Sell: {Currency: {Fungible: true}}}}\n    ) {\n      Trade {\n        Buy {\n          Currency {\n            Symbol\n            SmartContract\n          }\n          min_price: Price(minimum: Trade_Buy_Price)\n          max_rice: Price(maximum: Trade_Buy_Price)\n        }\n        Sell {\n          Currency {\n            Symbol\n            SmartContract\n          }\n        }\n      }\n      buy_amount: sum(of: Trade_Buy_Amount)\n      sell_amount: sum(of: Trade_Sell_Amount)\n      count\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Top-traded-NFT-tokens-in-a-month"},"here"),"."),(0,r.kt)("h2",{id:"latest-nft-trades-on-opensea"},"Latest NFT Trades on Opensea"),(0,r.kt)("p",null,"The following query retrieves the most latest Opensea trades by tracking the Seaport protocol ( Here seaport_v1.4 means all versions of seaport ) and all transactions sent to Opensea\u2019s seaport contract ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00000000000000adc04c56bf30ac9d3c0aaf14dc"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {ProtocolName: {in: "seaport_v1.4"}}}, Transaction: {To: {is: "0x00000000000000adc04c56bf30ac9d3c0aaf14dc"}}}\n      limit: {count: 10}\n      orderBy: {descending: Block_Time}\n    ) {\n      Trade {\n        Buy {\n          Currency {\n            Name\n            ProtocolName\n            Symbol\n            Fungible\n            SmartContract\n          }\n          Amount\n          Buyer\n          Ids\n          Price\n          URIs\n        }\n        Sell {\n          Currency {\n            Name\n            ProtocolName\n            Symbol\n            Decimals\n            Fungible\n            SmartContract\n          }\n          Amount\n          Buyer\n          Ids\n          URIs\n        }\n      }\n      Block {\n        Time\n        Number\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network")," : Specifies the Ethereum network."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset")," : Indicates the ",(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/dataset/combined"},"combined")," dataset to be used. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy")," : Orders the results in descending order based on the Block_Time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"where")," : Filters the results based on the specified conditions. In this case, We need to track ",(0,r.kt)("inlineCode",{parentName:"li"},"Seaport")," protocol and all transactions sent to Opensea\u2019s seaport contract ",(0,r.kt)("inlineCode",{parentName:"li"},"0x00000000000000adc04c56bf30ac9d3c0aaf14dc"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Data")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Buy")," :  Represents the buy side of the trade, including the currency being bought, amount, buyer's address, currency's name, and smart contract address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Sell")," : Represents the sell side of the trade, including the currency being sold, amount, buyer's address, currency's name, and smart contract address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block")," : Provides the block number and timestamp of the trade.")),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Latests-OpenSea-Trades"},"here"),"."),(0,r.kt)("h2",{id:"top-traded-nfts-on-opensea"},"Top Traded NFTs on Opensea"),(0,r.kt)("p",null,"This query retrieves the Top Traded NFTs on Opensea based on trade count and can also aggregate trading vol, trade count, buyer, seller, and nfts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {ProtocolName: {in: "seaport_v1.4"}}}, Transaction: {To: {is: "0x00000000000000adc04c56bf30ac9d3c0aaf14dc"}}}\n      orderBy: {descendingByField: "count"}\n      limit: {count: 10}\n    ) {\n      tradeVol: sum(of: Trade_Buy_Amount)\n      count\n      buyers: count(distinct: Trade_Buy_Buyer)\n      seller: count(distinct: Trade_Buy_Seller)\n      nfts: count(distinct: Trade_Buy_Ids)\n      Trade {\n        Buy {\n          Currency {\n            Name\n            ProtocolName\n            Symbol\n            Fungible\n            SmartContract\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Data")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tradeVol")," :  Represents  trading volume which is sum of trade buy amount."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count")," : Represents the total number of trades."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"buyers")," : count of distinct buyers involved in trades."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"seller")," : count of distinct sellers involved in trades."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nfts"),"  :  Represents the count of distinct Ids of NFTs traded.")),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Top-Traded-NFTs-on-Opensea"},"here"),"."),(0,r.kt)("h2",{id:"total-buy--sell-of-an-nft-on-opensea"},"Total Buy & Sell of an NFT on Opensea"),(0,r.kt)("p",null,"To Retrieve Total Buy & sell of specific NFT on Opensea, we just need to specify the currency contract address in the Buy filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},' query MyQuery {\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {ProtocolName: {in: "seaport_v1.4"}}, Buy: {Currency: {Fungible: false}}}, Transaction: {To: {is: "0x00000000000000adc04c56bf30ac9d3c0aaf14dc"}}}\n      orderBy: {descendingByField: "count"}\n      limit: {count: 10}\n    ) {\n      tradeVol: sum(of: Trade_Buy_Amount)\n      count\n      buyer: count(distinct: Trade_Buy_Buyer)\n      seller: count(distinct: Trade_Buy_Seller)\n      nfts: count(distinct: Trade_Buy_Ids)\n      Trade {\n        Buy {\n          Currency {\n            Name\n            ProtocolName\n            Symbol\n            Fungible\n            SmartContract\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Total-buy-sell-of-an-NFT-on-opensea"},"here"),"."),(0,r.kt)("h2",{id:"latest-nft-buyer-on-opensea"},"Latest NFT buyer on Opensea"),(0,r.kt)("p",null,"This query retrieves the Latest NFT buyer on Opensea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},' query MyQuery {\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {ProtocolName: {in: "seaport_v1.4"}}, Buy: {Currency: {Fungible: false}}}, Transaction: {To: {is: "0x00000000000000adc04c56bf30ac9d3c0aaf14dc"}}}\n      orderBy: {descendingByField: "count"}\n      limit: {count: 10}\n    ) {\n      count\n      uniq_tx: count(distinct: Transaction_Hash)\n      Block {\n        first_date: Time(minimum: Block_Date)\n        last_date: Time(maximum: Block_Date)\n      }\n      nfts: count(distinct: Trade_Buy_Ids)\n      difffernt_nfts: count(distinct: Trade_Buy_Currency_SmartContract)\n      total_money_paid: sum(of: Trade_Sell_Amount)\n      Trade {\n        Buy {\n          Buyer\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Total-buy-sell-of-an-NFT-on-opensea"},"here"),"."),(0,r.kt)("h2",{id:"specific-buyer-stats-of-an-nft-on-opensea"},"Specific Buyer stats of an NFT on Opensea"),(0,r.kt)("p",null,"This query retrieves the Specific Buyer stats of an NFT on Opensea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},' query MyQuery {\n  EVM(dataset: combined, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {ProtocolName: {in: "seaport_v1.4"}}, Buy: {Currency: {SmartContract: {is: "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"}}, Buyer: {is: "0x2f9ecaa66e12b6168996a6b80cda9bb142f80dd0"}}}, Transaction: {To: {is: "0x00000000000000adc04c56bf30ac9d3c0aaf14dc"}}}\n      orderBy: {descendingByField: "count"}\n      limit: {count: 10}\n    ) {\n      count\n      uniq_tx: count(distinct: Transaction_Hash)\n      Block {\n        first_date: Time(minimum: Block_Date)\n        last_date: Time(maximum: Block_Date)\n      }\n      nfts: count(distinct: Trade_Buy_Ids)\n      Trade {\n        Buy {\n          Buyer\n          Currency {\n            Name\n            ProtocolName\n            Symbol\n            Fungible\n            SmartContract\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/Top-buyer-of-specific-NFT"},"here"),"."),(0,r.kt)("h2",{id:"latest-nft-trades-on-ethereum-for-seaport-protocol"},"Latest NFT Trades on Ethereum for Seaport protocol"),(0,r.kt)("p",null,"This query retrieves the latest NFT Trades on Ethereum for Seaport v1.4 protocol. Many marketplaces utilize the Seaport protocol, we can add a Smart contract in Trade \u2192 Dex \u2192 SmartContract to get a specific marketplace for this protocol."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},' query MyQuery {\n  EVM {\n    DEXTrades(\n      limit: {offset: 0, count: 10}\n      orderBy: {descendingByField: "Block_Time"}\n      where: {Trade: {Dex: {ProtocolName: {is: "seaport_v1.4"}}}}\n    ) {\n      Trade {\n        Dex {\n          ProtocolName\n        }\n        Buy {\n          Price\n          Seller\n          Buyer\n          Currency {\n            HasURI\n            Name\n            Fungible\n            SmartContract\n          }\n        }\n        Sell {\n          Price\n          Amount\n          Currency {\n            Name\n          }\n          Buyer\n          Seller\n        }\n      }\n      Transaction {\n        Hash\n      }\n      Block {\n        Time\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can find the graphql query ",(0,r.kt)("a",{parentName:"p",href:"https://ide.bitquery.io/latest-NFT-trades-on-Ethereum-network"},"here"),"."))}p.isMDXComponent=!0}}]);