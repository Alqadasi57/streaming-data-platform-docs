"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[37845],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},i=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),m=s(r),b=o,d=m["".concat(u,".").concat(b)]||m[b]||p[b]||a;return r?n.createElement(d,l(l({ref:t},i),{},{components:r})):n.createElement(d,l({ref:t},i))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=b;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[m]="string"==typeof e?e:o,l[1]=c;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},26269:(e,t,r)=>{r.r(t),r.d(t,{Badge:()=>p,Bullet:()=>i,Details:()=>d,SpecifiedBy:()=>m,assets:()=>s,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>b});var n=r(87462),o=r(67294),a=r(3905);const l={id:"blocks-query-arg-enum",title:"blocks_query_arg_enum",hide_table_of_contents:!1},c=void 0,u={unversionedId:"graphql-reference/enums/blocks-query-arg-enum",id:"graphql-reference/enums/blocks-query-arg-enum",title:"blocks_query_arg_enum",description:"Type of algorithm to filter block updates",source:"@site/docs/graphql-reference/enums/blocks-query-arg-enum.mdx",sourceDirName:"graphql-reference/enums",slug:"/graphql-reference/enums/blocks-query-arg-enum",permalink:"/docs/graphql-reference/enums/blocks-query-arg-enum",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/graphql-reference/enums/blocks-query-arg-enum.mdx",tags:[],version:"current",frontMatter:{id:"blocks-query-arg-enum",title:"blocks_query_arg_enum",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"skip",permalink:"/docs/graphql-reference/directives/skip"},next:{title:"blocks_update_arg_enum",permalink:"/docs/graphql-reference/enums/blocks-update-arg-enum"}},s={},i=()=>(0,a.kt)(o.Fragment,null,(0,a.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),m=e=>(0,a.kt)(o.Fragment,null,"Specification",(0,a.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),p=e=>(0,a.kt)(o.Fragment,null,(0,a.kt)("span",{className:"badge badge--"+e.class},e.text)),b=[{value:"Values",id:"values",level:3},{value:"<code style={{ fontWeight: 'normal' }}>blocks_query_arg_enum.<b>trunk</b></code>",id:"code-style-fontweight-normal-blocks_query_arg_enumbtrunkbcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>blocks_query_arg_enum.<b>branches</b></code>",id:"code-style-fontweight-normal-blocks_query_arg_enumbbranchesbcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>blocks_query_arg_enum.<b>tree</b></code>",id:"code-style-fontweight-normal-blocks_query_arg_enumbtreebcode",level:4},{value:"Member of",id:"member-of",level:3}],d=e=>{let{dataOpen:t,dataClose:r,children:l,startOpen:c=!1}=e;const[u,s]=(0,o.useState)(c);return(0,a.kt)("details",(0,n.Z)({},u?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,a.kt)("summary",{onClick:e=>{e.preventDefault(),s((e=>!e))},style:{listStyle:"none"}},u?t:r),u&&l)},f={Bullet:i,SpecifiedBy:m,Badge:p,toc:b,Details:d},k="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(k,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Type of algorithm to filter block updates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum blocks_query_arg_enum {\n  trunk\n  branches\n  tree\n}\n")),(0,a.kt)("h3",{id:"values"},"Values"),(0,a.kt)("h4",{id:"code-style-fontweight-normal-blocks_query_arg_enumbtrunkbcode"},(0,a.kt)("a",{parentName:"h4",href:"#"},(0,a.kt)("code",{style:{fontWeight:"normal"}},"blocks_query_arg_enum.",(0,a.kt)("b",null,"trunk")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Blocks from the current head and down the reorg tree")),(0,a.kt)("h4",{id:"code-style-fontweight-normal-blocks_query_arg_enumbbranchesbcode"},(0,a.kt)("a",{parentName:"h4",href:"#"},(0,a.kt)("code",{style:{fontWeight:"normal"}},"blocks_query_arg_enum.",(0,a.kt)("b",null,"branches")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"WasOnBranch blocks on the branches of the reorg tree")),(0,a.kt)("h4",{id:"code-style-fontweight-normal-blocks_query_arg_enumbtreebcode"},(0,a.kt)("a",{parentName:"h4",href:"#"},(0,a.kt)("code",{style:{fontWeight:"normal"}},"blocks_query_arg_enum.",(0,a.kt)("b",null,"tree")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"All blocks ( trunk and uncles ) of the reorg tree")),(0,a.kt)("h3",{id:"member-of"},"Member of"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/graphql-reference/queries/evm"},(0,a.kt)("inlineCode",{parentName:"a"},"EVM")),"  ",(0,a.kt)(p,{class:"secondary",text:"query",mdxType:"Badge"})))}g.isMDXComponent=!0}}]);