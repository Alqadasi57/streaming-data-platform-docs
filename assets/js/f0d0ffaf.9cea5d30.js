"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:3},l="Filtering",o={unversionedId:"graphql/filters",id:"graphql/filters",title:"Filtering",description:"In most cases you do not need the full dataset, but just a portion, related to the",source:"@site/docs/graphql/filters.md",sourceDirName:"graphql",slug:"/graphql/filters",permalink:"/docs/graphql/filters",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/graphql/filters.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Blockchain Reorg Tree",permalink:"/docs/graphql/dataset/select_blocks"},next:{title:"Sorting",permalink:"/docs/graphql/sorting"}},p={},s=[{value:"Examples",id:"examples",level:2},{value:"Filter Types",id:"filter-types",level:2},{value:"Numeric Filter Types",id:"numeric-filter-types",level:3},{value:"String Filter Types",id:"string-filter-types",level:3},{value:"Date and Time Filter Types",id:"date-and-time-filter-types",level:3}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filtering"},"Filtering"),(0,i.kt)("p",null,"In most cases you do not need the full dataset, but just a portion, related to the\nentity or range you are interested in."),(0,i.kt)("p",null,"Filtering can be applied to queries and subscriptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in query, filter defines what part of the dataset you need in results"),(0,i.kt)("li",{parentName:"ul"},"with subscription, filter also determine when the updated data will be sent to you. If the new data does not match filter, update will not be triggered")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use filters in subscription for notification services on specific type of events matching filter criteria")),(0,i.kt)("p",null,"Filters are defined on the cube element level (Blocks, Transactions, so on) as a ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," attribute."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM {\n    Blocks(where: {\n        Block: {\n          GasUsed: {\n            ge: "14628560"\n          }\n        }\n    }) {\n      Block {\n        Number\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"returns block numbers with gas used exceeding certain level. ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," attribute is structured,\nwith the same levels as the query schema. This allows to build complex filters by combining criteria,\nas in the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  EVM {\n    Transactions(where: {\n        Block: {\n          GasUsed: {\n            ge: "26000000"\n          }\n        }\n      Transaction: {\n        Gas: {\n          ge: "16000000"\n        }\n      }\n    }) {\n      Block {\n        GasUsed\n      }\n      Transaction {\n        Gas\n\n      }\n    }\n  }\n}\n\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"filters are combined by ",(0,i.kt)("strong",{parentName:"p"},"AND")," principles, result set is an intersection of all criteria defined in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"where")," attribute")),(0,i.kt)("h2",{id:"filter-types"},"Filter Types"),(0,i.kt)("p",null,"Depending on the data type of the element used in ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," filter, different operators can be applied."),(0,i.kt)("h3",{id:"numeric-filter-types"},"Numeric Filter Types"),(0,i.kt)("p",null,"For numeric data, the following operators applicable:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"eq")," equals to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ne")," not equals to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ge")," greater or equal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gt")," greater than"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"le")," less or equal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lt")," less than")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you need to define the range of value, use ",(0,i.kt)("inlineCode",{parentName:"p"},"ge")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"le")," together:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},'          GasUsed: {\n            ge: "26000000"\n            le: "60000000"\n          }\n'))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Almost all numeric values in blockchain lies above the 32-bit boundary defined for numbers in GraphQL\nand JSON. So the string values used instead to define any number with not limited precision.")),(0,i.kt)("h3",{id:"string-filter-types"},"String Filter Types"),(0,i.kt)("p",null,"For string data, the following operators applicable:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is")," equals to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not")," not equals to")),(0,i.kt)("h3",{id:"date-and-time-filter-types"},"Date and Time Filter Types"),(0,i.kt)("p",null,"For date and timestamp data, the following operators applicable:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is")," date equals to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not")," date not equals to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after")," after certain date (not including it)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"since")," after including date"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"till")," before including date"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before")," before not including date")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"not")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ne")," filters do not prevent to query large amount of data, consider use them only with\nsome other filters")))}c.isMDXComponent=!0}}]);