"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[68775],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},80191:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:1},i="SmartContract API",o={unversionedId:"examples/calls/smartcontract_filterby",id:"examples/calls/smartcontract_filterby",title:"SmartContract API",description:"Smart Contract Calls by Method Signature",source:"@site/docs/examples/calls/smartcontract_filterby.md",sourceDirName:"examples/calls",slug:"/examples/calls/smartcontract_filterby",permalink:"/docs/examples/calls/smartcontract_filterby",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/examples/calls/smartcontract_filterby.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SmartContract Calls",permalink:"/docs/category/smartcontract-calls"},next:{title:"SmartContract Calls API",permalink:"/docs/examples/calls/smartcontract"}},s={},c=[{value:"Smart Contract Calls by Method Signature",id:"smart-contract-calls-by-method-signature",level:2},{value:"Smart Contract Calls by Opcode",id:"smart-contract-calls-by-opcode",level:2}],m={toc:c},d="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"smartcontract-api"},"SmartContract API"),(0,r.kt)("h2",{id:"smart-contract-calls-by-method-signature"},"Smart Contract Calls by Method Signature"),(0,r.kt)("p",null,"This query retrieves the 10 most recent smart contract calls that match a specific function signature (harvest()) on the Binance Smart Chain (BSC) network. It also includes transaction and block data associated with each call.\nYou can find the GraphQL query ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.bitquery.io/ide/Calls-by-Method-Signature"},"here")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'query MyQuery {\n  EVM(dataset: combined, network: bsc) {\n    Calls(\n      limit: {count: 10}\n      orderBy: {descending: Block_Date}\n      where: {Call: {Signature: {Signature: {is: "harvest()"}}}, Block: {Date: {after: "2023-01-01"}}}\n    ) {\n      Call {\n        LogCount\n        InternalCalls\n      }\n      Transaction {\n        Gas\n        Hash\n        From\n        To\n        Type\n        Index\n      }\n      Block {\n        Date\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EVM(dataset: combined, network: bsc)"),": This parameter specifies the blockchain network and dataset to query. In this case, we are querying the Binance Smart Chain network with the ",(0,r.kt)("a",{parentName:"li",href:"/docs/graphql/dataset/combined"},"combined")," dataset."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Calls"),": This parameter retrieves the list of smart contract calls that match the specified conditions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": {count: 10}: This parameter limits the number of results returned to 10."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy"),": {descending: Block_Date}: This parameter orders the results in descending order based on the block date of the calls."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'where: {Call: {Signature: {Signature: {is: "harvest()"}}}, Block: {Date: {after: "2023-01-01"}}}:')," This parameter specifies the conditions to filter the smart contract calls. In this case, we filter calls based on the function signature harvest() and a block date after January 1, 2023.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Data")),(0,r.kt)("p",null,"The query returns the following data for each smart contract call:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Call.LogCount"),": The number of log entries emitted by the call."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Call.InternalCalls"),": The list of internal calls made by the call."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Gas"),": The amount of gas used by the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Hash"),": The hash of the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"From"),": The address of the sender of the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"To"),": The address of the receiver of the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Type"),": The type of the transaction (e.g., contract creation or message call)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Index"),": The index of the transaction within the block."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block.Date"),": The date and time when the block was added to the blockchain.")),(0,r.kt)("h2",{id:"smart-contract-calls-by-opcode"},"Smart Contract Calls by Opcode"),(0,r.kt)("p",null,"This GraphQL query retrieves information about the latest STATICCALL EVM (Ethereum Virtual Machine) calls on the Binance Smart Chain network.\nYou can find the GraphQL query ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.bitquery.io/ide/Smart-Contract-Calls-by-Opcode"},"here")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'query MyQuery {\n  EVM(dataset: combined, network: bsc) {\n    Calls(\n      limit: {count: 10}\n      orderBy: {descending: Block_Date}\n      where: {Block: {Date: {after: "2023-01-01"}}, Call: {Opcode: {Name: {is: "STATICCALL"}}}}\n    ) {\n      Call {\n        LogCount\n        InternalCalls\n        Opcode {\n          Name\n        }\n      }\n      Transaction {\n        Gas\n        Hash\n        From\n        To\n        Type\n        Index\n      }\n      Block {\n        Date\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset")," parameter specifies the dataset to be queried, which is set to combined."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network")," parameter specifies the network to be queried, which is set to bsc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit")," parameter is used to limit the number of results returned and is set to 10."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy")," parameter is used to sort the results by the Block_Date field in descending order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"where")," parameter is used to filter the results based on certain conditions. In this case, the where parameter filters the results to include only STATICCALL calls made after January 1st, 2023.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Data")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Call"),": Returns information about the STATICCALL call, including the number of logs generated, internal calls made, and the name of the opcode used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction"),": Returns information about the transaction that contains the STATICCALL call, including the gas used, transaction hash, sender address, recipient address, transaction type, and transaction index."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block"),": Returns the date of the block in which the STATICCALL call was made.")))}p.isMDXComponent=!0}}]);