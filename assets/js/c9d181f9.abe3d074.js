"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},86932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:8},o="Uniswap Trades on Ethereum",s={unversionedId:"examples/realtimetrades",id:"examples/realtimetrades",title:"Uniswap Trades on Ethereum",description:"Uniswap is a decentralized exchange built on the Ethereum blockchain that allows users to trade Ethereum-based tokens. Uniswap uses an automated market maker (AMM) model where trades are executed by a smart contract that pools liquidity from multiple parties and sets prices based on a mathematical algorithm.",source:"@site/docs/examples/realtimetrades.md",sourceDirName:"examples",slug:"/examples/realtimetrades",permalink:"/docs/examples/realtimetrades",draft:!1,editUrl:"https://github.com/bitquery/streaming-data-platform-docs/tree/main/docs/examples/realtimetrades.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"NFT Token Transfers API",permalink:"/docs/examples/transfers/nft-token-transfer-api"},next:{title:"Transactions",permalink:"/docs/category/transactions"}},l={},d=[{value:"Uniswap v3 Trades",id:"uniswap-v3-trades",level:2}],c={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"uniswap-trades-on-ethereum"},"Uniswap Trades on Ethereum"),(0,r.kt)("p",null,"Uniswap is a decentralized exchange built on the Ethereum blockchain that allows users to trade Ethereum-based tokens. Uniswap uses an automated market maker (AMM) model where trades are executed by a smart contract that pools liquidity from multiple parties and sets prices based on a mathematical algorithm."),(0,r.kt)("p",null,"Bitquery's APIs allows you to retrieve information about trades that have occurred between two tokens on the Uniswap exchange. This endpoint returns a list of trades, along with various details about each trade, such as the amount of tokens exchanged, the price of the trade, and the timestamp of the trade. "),(0,r.kt)("h2",{id:"uniswap-v3-trades"},"Uniswap v3 Trades"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'query MyQuery {\n  EVM(dataset: realtime, network: eth) {\n    DEXTrades(\n      where: {Trade: {Dex: {OwnerAddress: {is: "0x1f98431c8ad98523631ae4a59f267346ea31f984"}}}}\n      limit: {count: 10}\n      orderBy: {descending: Fee_Burnt}\n    ) {\n      Transaction {\n        From\n        To\n      }\n      Trade {\n        Dex {\n          ProtocolName\n          SmartContract\n          Pair {\n            Name\n          }\n          OwnerAddress\n        }\n        Buy {\n          Currency {\n            Name\n          }\n          Price\n          Amount\n        }\n        Sell {\n          Amount\n          Currency {\n            Name\n          }\n          Price\n        }\n      }\n      Block {\n        Time\n      }\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EVM"),": The data set for Ethereum data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DEXTrades"),": The endpoint that returns information about the trades on the DEX."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"where"),": The condition to filter the trades by the DEX owner address. In this case, it's set to ",(0,r.kt)("inlineCode",{parentName:"li"},"0x1f98431c8ad98523631ae4a59f267346ea31f984"),", which is the factory address of Uniswap V3."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": The maximum number of trades to return. In this case, it's set to 10."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy"),": The field to order the results by. In this case, it's set to ",(0,r.kt)("inlineCode",{parentName:"li"},"Fee_Burnt")," in descending order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction"),": The transaction object, which contains the ",(0,r.kt)("inlineCode",{parentName:"li"},"From")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"To")," addresses of the trade."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Trade"),": The trade object, which contains information about the DEX, the tokens involved in the trade, and the prices."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Dex"),": The DEX object, which contains the name of the protocol, the smart contract address, the name of the pair, and the owner address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Buy"),": The object that represents the token being bought in the trade."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Sell"),": The object that represents the token being sold in the trade."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Currency"),": The object that contains the name of the token."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Amount"),": The amount of the token being traded."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Price"),": The price of the token being traded."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block"),": The block object, which contains the timestamp of the block in which the trade was executed.")))}p.isMDXComponent=!0}}]);